'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.atomButtonTypes = exports.atomButtonGroupPositions = undefined;

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CLASS = 'sui-AtomButton';
var TYPES = ['primary', 'accent', 'secondary', 'tertiary'];
var GROUP_POSITIONS = {
  FIRST: 'first',
  MIDDLE: 'middle',
  LAST: 'last'
};
var SIZES = ['small', 'large'];
var MODIFIERS = ['disabled', 'fullWidth', 'focused', 'negative', 'link'];
var OWN_PROPS = [].concat(TYPES, SIZES, ['groupPosition', 'leftIcon', 'rightIcon', 'className', 'children', 'fullWidth', 'focused', 'negative', 'type']);
var CLASSES = [].concat(TYPES, SIZES, MODIFIERS, ['empty']).reduce(function (res, key) {
  return (0, _assign2.default)(res, (0, _defineProperty3.default)({}, key, CLASS + '--' + key));
}, {});

/**
 * Get props cleaning out AtomButton own props
 * @param  {Object} props
 * @return {Object}
 */
var cleanProps = function cleanProps(props) {
  var newProps = (0, _extends3.default)({}, props);
  OWN_PROPS.forEach(function (key) {
    return delete newProps[key];
  });
  return newProps;
};

/**
 * Get modifiers to apply according to props
 * @param  {Object} props
 * @return {Array<String>}
 */
var getModifiers = function getModifiers(props) {
  return (0, _keys2.default)(props).filter(function (name) {
    return props[name] && MODIFIERS.includes(name);
  });
};

var AtomButton = function AtomButton(props) {
  var children = props.children,
      className = props.className,
      groupPosition = props.groupPosition,
      leftIcon = props.leftIcon,
      rightIcon = props.rightIcon,
      size = props.size,
      title = props.title,
      type = props.type;


  var classNames = (0, _classnames2.default)(CLASS, CLASSES[type], groupPosition && CLASS + '-group ' + CLASS + '-group--' + groupPosition, size && CLASSES[size], getModifiers(props).map(function (key) {
    return CLASSES[key];
  }), !children && CLASSES.empty, className);
  var newProps = cleanProps(props);

  return _react2.default.createElement(
    _Button2.default,
    (0, _extends3.default)({}, newProps, { className: classNames, title: title }),
    _react2.default.createElement(
      'span',
      { className: CLASS + '-inner' },
      leftIcon && _react2.default.createElement(
        'span',
        { className: CLASS + '-leftIcon' },
        leftIcon
      ),
      leftIcon || rightIcon ? _react2.default.createElement(
        'span',
        { className: CLASS + '-text' },
        children
      ) : children,
      rightIcon && _react2.default.createElement(
        'span',
        { className: CLASS + '-rightIcon' },
        rightIcon
      )
    )
  );
};

AtomButton.displayName = 'AtomButton';

AtomButton.propTypes = process.env.NODE_ENV !== "production" ? process.env.NODE_ENV !== "production" ? {
  /**
   * HTML element: if true, render a link. Otherwise render a button
   */
  link: _propTypes2.default.bool,
  /**
   * URL to be added on the HTML link
   */
  href: _propTypes2.default.string,
  /**
   * Target to be added on the HTML link
   */
  target: _propTypes2.default.string,
  /**
   * Title to be added on button or link
   */
  title: _propTypes2.default.string,
  /**
   * Type of button: 'primary' (default), 'accent', 'secondary', 'tertiary'
   */
  type: _propTypes2.default.oneOf(TYPES),
  /**
   * Group position: 'first', 'middle' (default), 'last'
   */
  groupPosition: _propTypes2.default.oneOf((0, _values2.default)(GROUP_POSITIONS)),
  /**
   * Size of button{
   * FIRST: 'first',
   * MIDDLE: 'middle',
   * LAST: 'last'}: 'small',
   */
  size: _propTypes2.default.oneOf(SIZES),
  /**
   * Negative: style for dark backgrounds.
   */
  negative: _propTypes2.default.bool,
  /**
   * Modifier: state of :hover,:active, :focus
   */
  focused: _propTypes2.default.bool,
  /**
   * Disable: faded with no interaction.
   */
  disabled: _propTypes2.default.bool,
  /**
   * Modifier: full width (100%)
   */
  fullWidth: _propTypes2.default.bool,
  /**
   * Icon to be added on the left of the content
   */
  leftIcon: _propTypes2.default.node,
  /**
   * Icon to be added on the right of the content
   */
  rightIcon: _propTypes2.default.node,
  /**
   * Content to be included in the button
   */
  children: _propTypes2.default.node,
  /**
   * Classes to add to button
   */
  className: _propTypes2.default.any,
  /**
   * Factory used to create navigation links
   */
  linkFactory: _propTypes2.default.func,
  /**
   * if true, type="submit" (needed when several buttons coexist under the same form)
   */
  isSubmit: _propTypes2.default.bool,
  /**
   * if true, type="button" (needed when several buttons coexist under the same form)
   */
  isButton: _propTypes2.default.bool
} : {} : {};

AtomButton.defaultProps = {
  type: 'primary'
};

exports.default = AtomButton;
exports.atomButtonGroupPositions = GROUP_POSITIONS;
exports.atomButtonTypes = TYPES;